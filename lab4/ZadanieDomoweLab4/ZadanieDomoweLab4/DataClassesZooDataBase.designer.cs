#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZadanieDomoweLab4
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ZadanieDomoweLab3")]
	public partial class DataClassesZooDataBaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnimal(Animal instance);
    partial void UpdateAnimal(Animal instance);
    partial void DeleteAnimal(Animal instance);
    partial void InsertBasicInfo(BasicInfo instance);
    partial void UpdateBasicInfo(BasicInfo instance);
    partial void DeleteBasicInfo(BasicInfo instance);
    partial void InsertBuilding(Building instance);
    partial void UpdateBuilding(Building instance);
    partial void DeleteBuilding(Building instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeesInfo(EmployeesInfo instance);
    partial void UpdateEmployeesInfo(EmployeesInfo instance);
    partial void DeleteEmployeesInfo(EmployeesInfo instance);
    partial void InsertFood(Food instance);
    partial void UpdateFood(Food instance);
    partial void DeleteFood(Food instance);
    partial void InsertTicketPrice(TicketPrice instance);
    partial void UpdateTicketPrice(TicketPrice instance);
    partial void DeleteTicketPrice(TicketPrice instance);
    partial void InsertVisitor(Visitor instance);
    partial void UpdateVisitor(Visitor instance);
    partial void DeleteVisitor(Visitor instance);
    partial void InsertWorkSchedule(WorkSchedule instance);
    partial void UpdateWorkSchedule(WorkSchedule instance);
    partial void DeleteWorkSchedule(WorkSchedule instance);
    partial void InsertWorkType(WorkType instance);
    partial void UpdateWorkType(WorkType instance);
    partial void DeleteWorkType(WorkType instance);
    #endregion
		
		public DataClassesZooDataBaseDataContext() : 
				base(global::ZadanieDomoweLab4.Properties.Settings.Default.ZadanieDomoweLab3ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesZooDataBaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesZooDataBaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesZooDataBaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesZooDataBaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Animal> Animals
		{
			get
			{
				return this.GetTable<Animal>();
			}
		}
		
		public System.Data.Linq.Table<BasicInfo> BasicInfos
		{
			get
			{
				return this.GetTable<BasicInfo>();
			}
		}
		
		public System.Data.Linq.Table<Building> Buildings
		{
			get
			{
				return this.GetTable<Building>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeesInfo> EmployeesInfos
		{
			get
			{
				return this.GetTable<EmployeesInfo>();
			}
		}
		
		public System.Data.Linq.Table<Food> Foods
		{
			get
			{
				return this.GetTable<Food>();
			}
		}
		
		public System.Data.Linq.Table<TicketPrice> TicketPrices
		{
			get
			{
				return this.GetTable<TicketPrice>();
			}
		}
		
		public System.Data.Linq.Table<Visitor> Visitors
		{
			get
			{
				return this.GetTable<Visitor>();
			}
		}
		
		public System.Data.Linq.Table<WorkSchedule> WorkSchedules
		{
			get
			{
				return this.GetTable<WorkSchedule>();
			}
		}
		
		public System.Data.Linq.Table<WorkType> WorkTypes
		{
			get
			{
				return this.GetTable<WorkType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Animals")]
	public partial class Animal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _NameOfTheAnimal;
		
		private short _HowManyAnimals;
		
		private short _BasicInfoId;
		
		private short _EmployeesInfoId;
		
		private EntitySet<WorkSchedule> _WorkSchedules;
		
		private EntityRef<BasicInfo> _BasicInfo;
		
		private EntityRef<EmployeesInfo> _EmployeesInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameOfTheAnimalChanging(string value);
    partial void OnNameOfTheAnimalChanged();
    partial void OnHowManyAnimalsChanging(short value);
    partial void OnHowManyAnimalsChanged();
    partial void OnBasicInfoIdChanging(short value);
    partial void OnBasicInfoIdChanged();
    partial void OnEmployeesInfoIdChanging(short value);
    partial void OnEmployeesInfoIdChanged();
    #endregion
		
		public Animal()
		{
			this._WorkSchedules = new EntitySet<WorkSchedule>(new Action<WorkSchedule>(this.attach_WorkSchedules), new Action<WorkSchedule>(this.detach_WorkSchedules));
			this._BasicInfo = default(EntityRef<BasicInfo>);
			this._EmployeesInfo = default(EntityRef<EmployeesInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOfTheAnimal", DbType="NVarChar(31) NOT NULL", CanBeNull=false)]
		public string NameOfTheAnimal
		{
			get
			{
				return this._NameOfTheAnimal;
			}
			set
			{
				if ((this._NameOfTheAnimal != value))
				{
					this.OnNameOfTheAnimalChanging(value);
					this.SendPropertyChanging();
					this._NameOfTheAnimal = value;
					this.SendPropertyChanged("NameOfTheAnimal");
					this.OnNameOfTheAnimalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HowManyAnimals", DbType="SmallInt NOT NULL")]
		public short HowManyAnimals
		{
			get
			{
				return this._HowManyAnimals;
			}
			set
			{
				if ((this._HowManyAnimals != value))
				{
					this.OnHowManyAnimalsChanging(value);
					this.SendPropertyChanging();
					this._HowManyAnimals = value;
					this.SendPropertyChanged("HowManyAnimals");
					this.OnHowManyAnimalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicInfoId", DbType="SmallInt NOT NULL")]
		public short BasicInfoId
		{
			get
			{
				return this._BasicInfoId;
			}
			set
			{
				if ((this._BasicInfoId != value))
				{
					if (this._BasicInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBasicInfoIdChanging(value);
					this.SendPropertyChanging();
					this._BasicInfoId = value;
					this.SendPropertyChanged("BasicInfoId");
					this.OnBasicInfoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeesInfoId", DbType="SmallInt NOT NULL")]
		public short EmployeesInfoId
		{
			get
			{
				return this._EmployeesInfoId;
			}
			set
			{
				if ((this._EmployeesInfoId != value))
				{
					if (this._EmployeesInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeesInfoIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeesInfoId = value;
					this.SendPropertyChanged("EmployeesInfoId");
					this.OnEmployeesInfoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_WorkSchedule", Storage="_WorkSchedules", ThisKey="Id", OtherKey="AnimalId")]
		public EntitySet<WorkSchedule> WorkSchedules
		{
			get
			{
				return this._WorkSchedules;
			}
			set
			{
				this._WorkSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicInfo_Animal", Storage="_BasicInfo", ThisKey="BasicInfoId", OtherKey="Id", IsForeignKey=true)]
		public BasicInfo BasicInfo
		{
			get
			{
				return this._BasicInfo.Entity;
			}
			set
			{
				BasicInfo previousValue = this._BasicInfo.Entity;
				if (((previousValue != value) 
							|| (this._BasicInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BasicInfo.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._BasicInfo.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._BasicInfoId = value.Id;
					}
					else
					{
						this._BasicInfoId = default(short);
					}
					this.SendPropertyChanged("BasicInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeesInfo_Animal", Storage="_EmployeesInfo", ThisKey="EmployeesInfoId", OtherKey="Id", IsForeignKey=true)]
		public EmployeesInfo EmployeesInfo
		{
			get
			{
				return this._EmployeesInfo.Entity;
			}
			set
			{
				EmployeesInfo previousValue = this._EmployeesInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmployeesInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeesInfo.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._EmployeesInfo.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._EmployeesInfoId = value.Id;
					}
					else
					{
						this._EmployeesInfoId = default(short);
					}
					this.SendPropertyChanged("EmployeesInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkSchedules(WorkSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_WorkSchedules(WorkSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BasicInfos")]
	public partial class BasicInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _TypeOfAnAnimal;
		
		private string _Climate;
		
		private EntitySet<Animal> _Animals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnTypeOfAnAnimalChanging(string value);
    partial void OnTypeOfAnAnimalChanged();
    partial void OnClimateChanging(string value);
    partial void OnClimateChanged();
    #endregion
		
		public BasicInfo()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfAnAnimal", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string TypeOfAnAnimal
		{
			get
			{
				return this._TypeOfAnAnimal;
			}
			set
			{
				if ((this._TypeOfAnAnimal != value))
				{
					this.OnTypeOfAnAnimalChanging(value);
					this.SendPropertyChanging();
					this._TypeOfAnAnimal = value;
					this.SendPropertyChanged("TypeOfAnAnimal");
					this.OnTypeOfAnAnimalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Climate", DbType="NVarChar(31) NOT NULL", CanBeNull=false)]
		public string Climate
		{
			get
			{
				return this._Climate;
			}
			set
			{
				if ((this._Climate != value))
				{
					this.OnClimateChanging(value);
					this.SendPropertyChanging();
					this._Climate = value;
					this.SendPropertyChanged("Climate");
					this.OnClimateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicInfo_Animal", Storage="_Animals", ThisKey="Id", OtherKey="BasicInfoId")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.BasicInfo = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.BasicInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Buildings")]
	public partial class Building : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _NameOfTheBuilding;
		
		private EntitySet<WorkSchedule> _WorkSchedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameOfTheBuildingChanging(string value);
    partial void OnNameOfTheBuildingChanged();
    #endregion
		
		public Building()
		{
			this._WorkSchedules = new EntitySet<WorkSchedule>(new Action<WorkSchedule>(this.attach_WorkSchedules), new Action<WorkSchedule>(this.detach_WorkSchedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOfTheBuilding", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string NameOfTheBuilding
		{
			get
			{
				return this._NameOfTheBuilding;
			}
			set
			{
				if ((this._NameOfTheBuilding != value))
				{
					this.OnNameOfTheBuildingChanging(value);
					this.SendPropertyChanging();
					this._NameOfTheBuilding = value;
					this.SendPropertyChanged("NameOfTheBuilding");
					this.OnNameOfTheBuildingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_WorkSchedule", Storage="_WorkSchedules", ThisKey="Id", OtherKey="BuildingId")]
		public EntitySet<WorkSchedule> WorkSchedules
		{
			get
			{
				return this._WorkSchedules;
			}
			set
			{
				this._WorkSchedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkSchedules(WorkSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Building = this;
		}
		
		private void detach_WorkSchedules(WorkSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Building = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private string _Surname;
		
		private string _PESEL;
		
		private short _JobId;
		
		private EntitySet<WorkSchedule> _WorkSchedules;
		
		private EntityRef<WorkType> _WorkType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPESELChanging(string value);
    partial void OnPESELChanged();
    partial void OnJobIdChanging(short value);
    partial void OnJobIdChanged();
    #endregion
		
		public Employee()
		{
			this._WorkSchedules = new EntitySet<WorkSchedule>(new Action<WorkSchedule>(this.attach_WorkSchedules), new Action<WorkSchedule>(this.detach_WorkSchedules));
			this._WorkType = default(EntityRef<WorkType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(31) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(31) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PESEL", DbType="NChar(11) NOT NULL", CanBeNull=false)]
		public string PESEL
		{
			get
			{
				return this._PESEL;
			}
			set
			{
				if ((this._PESEL != value))
				{
					this.OnPESELChanging(value);
					this.SendPropertyChanging();
					this._PESEL = value;
					this.SendPropertyChanged("PESEL");
					this.OnPESELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="SmallInt NOT NULL")]
		public short JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._WorkType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkSchedule", Storage="_WorkSchedules", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<WorkSchedule> WorkSchedules
		{
			get
			{
				return this._WorkSchedules;
			}
			set
			{
				this._WorkSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkType_Employee", Storage="_WorkType", ThisKey="JobId", OtherKey="Id", IsForeignKey=true)]
		public WorkType WorkType
		{
			get
			{
				return this._WorkType.Entity;
			}
			set
			{
				WorkType previousValue = this._WorkType.Entity;
				if (((previousValue != value) 
							|| (this._WorkType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkType.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._WorkType.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._JobId = value.Id;
					}
					else
					{
						this._JobId = default(short);
					}
					this.SendPropertyChanged("WorkType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkSchedules(WorkSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_WorkSchedules(WorkSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeesInfos")]
	public partial class EmployeesInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _FoodForAnimal;
		
		private short _HowManyTimesFed;
		
		private EntitySet<Animal> _Animals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnFoodForAnimalChanging(string value);
    partial void OnFoodForAnimalChanged();
    partial void OnHowManyTimesFedChanging(short value);
    partial void OnHowManyTimesFedChanged();
    #endregion
		
		public EmployeesInfo()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodForAnimal", DbType="NVarChar(31) NOT NULL", CanBeNull=false)]
		public string FoodForAnimal
		{
			get
			{
				return this._FoodForAnimal;
			}
			set
			{
				if ((this._FoodForAnimal != value))
				{
					this.OnFoodForAnimalChanging(value);
					this.SendPropertyChanging();
					this._FoodForAnimal = value;
					this.SendPropertyChanged("FoodForAnimal");
					this.OnFoodForAnimalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HowManyTimesFed", DbType="SmallInt NOT NULL")]
		public short HowManyTimesFed
		{
			get
			{
				return this._HowManyTimesFed;
			}
			set
			{
				if ((this._HowManyTimesFed != value))
				{
					this.OnHowManyTimesFedChanging(value);
					this.SendPropertyChanging();
					this._HowManyTimesFed = value;
					this.SendPropertyChanged("HowManyTimesFed");
					this.OnHowManyTimesFedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeesInfo_Animal", Storage="_Animals", ThisKey="Id", OtherKey="EmployeesInfoId")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.EmployeesInfo = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.EmployeesInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Foods")]
	public partial class Food : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _NameOfFood;
		
		private short _Price;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameOfFoodChanging(string value);
    partial void OnNameOfFoodChanged();
    partial void OnPriceChanging(short value);
    partial void OnPriceChanged();
    #endregion
		
		public Food()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOfFood", DbType="NVarChar(31) NOT NULL", CanBeNull=false)]
		public string NameOfFood
		{
			get
			{
				return this._NameOfFood;
			}
			set
			{
				if ((this._NameOfFood != value))
				{
					this.OnNameOfFoodChanging(value);
					this.SendPropertyChanging();
					this._NameOfFood = value;
					this.SendPropertyChanged("NameOfFood");
					this.OnNameOfFoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="SmallInt NOT NULL")]
		public short Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketPrices")]
	public partial class TicketPrice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _TypeOfTicket;
		
		private short _Price;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnTypeOfTicketChanging(string value);
    partial void OnTypeOfTicketChanged();
    partial void OnPriceChanging(short value);
    partial void OnPriceChanged();
    #endregion
		
		public TicketPrice()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfTicket", DbType="NVarChar(31) NOT NULL", CanBeNull=false)]
		public string TypeOfTicket
		{
			get
			{
				return this._TypeOfTicket;
			}
			set
			{
				if ((this._TypeOfTicket != value))
				{
					this.OnTypeOfTicketChanging(value);
					this.SendPropertyChanging();
					this._TypeOfTicket = value;
					this.SendPropertyChanged("TypeOfTicket");
					this.OnTypeOfTicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="SmallInt NOT NULL")]
		public short Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visitors")]
	public partial class Visitor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Hour;
		
		private string _HowManyVisitors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnHourChanging(string value);
    partial void OnHourChanged();
    partial void OnHowManyVisitorsChanging(string value);
    partial void OnHowManyVisitorsChanged();
    #endregion
		
		public Visitor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hour", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Hour
		{
			get
			{
				return this._Hour;
			}
			set
			{
				if ((this._Hour != value))
				{
					this.OnHourChanging(value);
					this.SendPropertyChanging();
					this._Hour = value;
					this.SendPropertyChanged("Hour");
					this.OnHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HowManyVisitors", DbType="NVarChar(31) NOT NULL", CanBeNull=false)]
		public string HowManyVisitors
		{
			get
			{
				return this._HowManyVisitors;
			}
			set
			{
				if ((this._HowManyVisitors != value))
				{
					this.OnHowManyVisitorsChanging(value);
					this.SendPropertyChanging();
					this._HowManyVisitors = value;
					this.SendPropertyChanged("HowManyVisitors");
					this.OnHowManyVisitorsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkSchedules")]
	public partial class WorkSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private short _BuildingId;
		
		private short _EmployeeId;
		
		private short _AnimalId;
		
		private EntityRef<Animal> _Animal;
		
		private EntityRef<Building> _Building;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnBuildingIdChanging(short value);
    partial void OnBuildingIdChanged();
    partial void OnEmployeeIdChanging(short value);
    partial void OnEmployeeIdChanged();
    partial void OnAnimalIdChanging(short value);
    partial void OnAnimalIdChanged();
    #endregion
		
		public WorkSchedule()
		{
			this._Animal = default(EntityRef<Animal>);
			this._Building = default(EntityRef<Building>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingId", DbType="SmallInt NOT NULL")]
		public short BuildingId
		{
			get
			{
				return this._BuildingId;
			}
			set
			{
				if ((this._BuildingId != value))
				{
					if (this._Building.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuildingIdChanging(value);
					this.SendPropertyChanging();
					this._BuildingId = value;
					this.SendPropertyChanged("BuildingId");
					this.OnBuildingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="SmallInt NOT NULL")]
		public short EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalId", DbType="SmallInt NOT NULL")]
		public short AnimalId
		{
			get
			{
				return this._AnimalId;
			}
			set
			{
				if ((this._AnimalId != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnimalIdChanging(value);
					this.SendPropertyChanging();
					this._AnimalId = value;
					this.SendPropertyChanged("AnimalId");
					this.OnAnimalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_WorkSchedule", Storage="_Animal", ThisKey="AnimalId", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.WorkSchedules.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.WorkSchedules.Add(this);
						this._AnimalId = value.Id;
					}
					else
					{
						this._AnimalId = default(short);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_WorkSchedule", Storage="_Building", ThisKey="BuildingId", OtherKey="Id", IsForeignKey=true)]
		public Building Building
		{
			get
			{
				return this._Building.Entity;
			}
			set
			{
				Building previousValue = this._Building.Entity;
				if (((previousValue != value) 
							|| (this._Building.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Building.Entity = null;
						previousValue.WorkSchedules.Remove(this);
					}
					this._Building.Entity = value;
					if ((value != null))
					{
						value.WorkSchedules.Add(this);
						this._BuildingId = value.Id;
					}
					else
					{
						this._BuildingId = default(short);
					}
					this.SendPropertyChanged("Building");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkSchedule", Storage="_Employee", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.WorkSchedules.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.WorkSchedules.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(short);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkTypes")]
	public partial class WorkType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Job;
		
		private short _Salary;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnJobChanging(string value);
    partial void OnJobChanged();
    partial void OnSalaryChanging(short value);
    partial void OnSalaryChanged();
    #endregion
		
		public WorkType()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Job", DbType="NVarChar(31) NOT NULL", CanBeNull=false)]
		public string Job
		{
			get
			{
				return this._Job;
			}
			set
			{
				if ((this._Job != value))
				{
					this.OnJobChanging(value);
					this.SendPropertyChanging();
					this._Job = value;
					this.SendPropertyChanged("Job");
					this.OnJobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="SmallInt NOT NULL")]
		public short Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkType_Employee", Storage="_Employees", ThisKey="Id", OtherKey="JobId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.WorkType = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.WorkType = null;
		}
	}
}
#pragma warning restore 1591
