#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZadanieDomoweLab5
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ZadanieDomoweLab5")]
	public partial class DataClassesRankingDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPersonalRanking(PersonalRanking instance);
    partial void UpdatePersonalRanking(PersonalRanking instance);
    partial void DeletePersonalRanking(PersonalRanking instance);
    partial void InsertUserInfo(UserInfo instance);
    partial void UpdateUserInfo(UserInfo instance);
    partial void DeleteUserInfo(UserInfo instance);
    partial void InsertStatistic(Statistic instance);
    partial void UpdateStatistic(Statistic instance);
    partial void DeleteStatistic(Statistic instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    #endregion
		
		public DataClassesRankingDatabaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ZadanieDomoweLab5ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesRankingDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesRankingDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesRankingDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesRankingDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PersonalRanking> PersonalRankings
		{
			get
			{
				return this.GetTable<PersonalRanking>();
			}
		}
		
		public System.Data.Linq.Table<UserInfo> UserInfos
		{
			get
			{
				return this.GetTable<UserInfo>();
			}
		}
		
		public System.Data.Linq.Table<Statistic> Statistics
		{
			get
			{
				return this.GetTable<Statistic>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonalRanking")]
	public partial class PersonalRanking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Score;
		
		private int _UserID;
		
		private EntityRef<UserInfo> _UserInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnScoreChanging(int value);
    partial void OnScoreChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public PersonalRanking()
		{
			this._UserInfo = default(EntityRef<UserInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInfo_PersonalRanking", Storage="_UserInfo", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public UserInfo UserInfo
		{
			get
			{
				return this._UserInfo.Entity;
			}
			set
			{
				UserInfo previousValue = this._UserInfo.Entity;
				if (((previousValue != value) 
							|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserInfo.Entity = null;
						previousValue.PersonalRankings.Remove(this);
					}
					this._UserInfo.Entity = value;
					if ((value != null))
					{
						value.PersonalRankings.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UserInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserInfos")]
	public partial class UserInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _Surname;
		
		private string _EyeColor;
		
		private string _FavouriteAnimal;
		
		private EntitySet<PersonalRanking> _PersonalRankings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnEyeColorChanging(string value);
    partial void OnEyeColorChanged();
    partial void OnFavouriteAnimalChanging(string value);
    partial void OnFavouriteAnimalChanged();
    #endregion
		
		public UserInfo()
		{
			this._PersonalRankings = new EntitySet<PersonalRanking>(new Action<PersonalRanking>(this.attach_PersonalRankings), new Action<PersonalRanking>(this.detach_PersonalRankings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(31) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(31) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EyeColor", DbType="NVarChar(31)")]
		public string EyeColor
		{
			get
			{
				return this._EyeColor;
			}
			set
			{
				if ((this._EyeColor != value))
				{
					this.OnEyeColorChanging(value);
					this.SendPropertyChanging();
					this._EyeColor = value;
					this.SendPropertyChanged("EyeColor");
					this.OnEyeColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FavouriteAnimal", DbType="NVarChar(31)")]
		public string FavouriteAnimal
		{
			get
			{
				return this._FavouriteAnimal;
			}
			set
			{
				if ((this._FavouriteAnimal != value))
				{
					this.OnFavouriteAnimalChanging(value);
					this.SendPropertyChanging();
					this._FavouriteAnimal = value;
					this.SendPropertyChanged("FavouriteAnimal");
					this.OnFavouriteAnimalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInfo_PersonalRanking", Storage="_PersonalRankings", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PersonalRanking> PersonalRankings
		{
			get
			{
				return this._PersonalRankings;
			}
			set
			{
				this._PersonalRankings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonalRankings(PersonalRanking entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = this;
		}
		
		private void detach_PersonalRankings(PersonalRanking entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Statistics]")]
	public partial class Statistic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _NumberOfViews;
		
		private int _TimeSpendInGame;
		
		private EntitySet<Game> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberOfViewsChanging(int value);
    partial void OnNumberOfViewsChanged();
    partial void OnTimeSpendInGameChanging(int value);
    partial void OnTimeSpendInGameChanged();
    #endregion
		
		public Statistic()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfViews", DbType="Int NOT NULL")]
		public int NumberOfViews
		{
			get
			{
				return this._NumberOfViews;
			}
			set
			{
				if ((this._NumberOfViews != value))
				{
					this.OnNumberOfViewsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfViews = value;
					this.SendPropertyChanged("NumberOfViews");
					this.OnNumberOfViewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeSpendInGame", DbType="Int NOT NULL")]
		public int TimeSpendInGame
		{
			get
			{
				return this._TimeSpendInGame;
			}
			set
			{
				if ((this._TimeSpendInGame != value))
				{
					this.OnTimeSpendInGameChanging(value);
					this.SendPropertyChanging();
					this._TimeSpendInGame = value;
					this.SendPropertyChanged("TimeSpendInGame");
					this.OnTimeSpendInGameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Statistic_Game", Storage="_Games", ThisKey="ID", OtherKey="StatisticsID")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Statistic = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Statistic = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Games")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NameOfGame;
		
		private string _LevelOfDifficulty;
		
		private int _StatisticsID;
		
		private EntityRef<Statistic> _Statistic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameOfGameChanging(string value);
    partial void OnNameOfGameChanged();
    partial void OnLevelOfDifficultyChanging(string value);
    partial void OnLevelOfDifficultyChanged();
    partial void OnStatisticsIDChanging(int value);
    partial void OnStatisticsIDChanged();
    #endregion
		
		public Game()
		{
			this._Statistic = default(EntityRef<Statistic>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOfGame", DbType="NVarChar(31) NOT NULL", CanBeNull=false)]
		public string NameOfGame
		{
			get
			{
				return this._NameOfGame;
			}
			set
			{
				if ((this._NameOfGame != value))
				{
					this.OnNameOfGameChanging(value);
					this.SendPropertyChanging();
					this._NameOfGame = value;
					this.SendPropertyChanged("NameOfGame");
					this.OnNameOfGameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelOfDifficulty", DbType="NVarChar(31)")]
		public string LevelOfDifficulty
		{
			get
			{
				return this._LevelOfDifficulty;
			}
			set
			{
				if ((this._LevelOfDifficulty != value))
				{
					this.OnLevelOfDifficultyChanging(value);
					this.SendPropertyChanging();
					this._LevelOfDifficulty = value;
					this.SendPropertyChanged("LevelOfDifficulty");
					this.OnLevelOfDifficultyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatisticsID", DbType="Int NOT NULL")]
		public int StatisticsID
		{
			get
			{
				return this._StatisticsID;
			}
			set
			{
				if ((this._StatisticsID != value))
				{
					if (this._Statistic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatisticsIDChanging(value);
					this.SendPropertyChanging();
					this._StatisticsID = value;
					this.SendPropertyChanged("StatisticsID");
					this.OnStatisticsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Statistic_Game", Storage="_Statistic", ThisKey="StatisticsID", OtherKey="ID", IsForeignKey=true)]
		public Statistic Statistic
		{
			get
			{
				return this._Statistic.Entity;
			}
			set
			{
				Statistic previousValue = this._Statistic.Entity;
				if (((previousValue != value) 
							|| (this._Statistic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Statistic.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Statistic.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._StatisticsID = value.ID;
					}
					else
					{
						this._StatisticsID = default(int);
					}
					this.SendPropertyChanged("Statistic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
